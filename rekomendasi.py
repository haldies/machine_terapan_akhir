# -*- coding: utf-8 -*-
"""Untitled4.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1q2uEoB-4yqFTem0Sv1v7Q6xT4zgBdtEq

#Import libary yang dibutuhkan
"""

# pip install lightfm

import pandas as pd
from lightfm import LightFM
from lightfm.data import Dataset
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np
from lightfm.cross_validation import random_train_test_split
from lightfm.evaluation import precision_at_k, auc_score
from IPython.display import Image, display
import warnings
warnings.filterwarnings('ignore')

"""# Data wrangling

## Gathering Data
"""

df_ratings = pd.read_csv('Ratings.csv')
df_books = pd.read_csv('Books.csv')
df_users = pd.read_csv('Users.csv')


print(df_users.shape)
print(df_books.shape)
print(df_ratings.shape)

"""## Assessing Data"""

print("\n--- Info Users ---")
print(df_users.info())
print("\n--- Missing Users ---")
print(df_users.isnull().sum())

"""Dataset: Users
Jumlah total entri: 278.858 pengguna.

Kolom Age (usia) memiliki 110.762 missing values, atau sekitar 39.7% dari total data.

Usia disimpan sebagai float, tapi seharusnya bisa dikonversi ke int setelah pembersihan.

Tidak ada missing value untuk kolom User-ID dan Location.

"""

print("\n--- Info Books ---")
print(df_books.info())
print("\n--- Missing Books ---")
print(df_books.isnull().sum())

"""Dataset: Books

Jumlah entri: 271.360 buku.

Kolom Book-Author dan Publisher memiliki 2 missing values masing-masing.

Kolom Image-URL-L (gambar ukuran besar) memiliki 3 missing values.

Semua kolom bertipe object, termasuk Year-Of-Publication yang seharusnya bertipe numerik.

"""

print("\n--- Info Ratings ---")
print(df_ratings.info())
print("\n--- Missing Ratings ---")
print(df_ratings.isnull().sum())

"""Dataset: Ratings

Jumlah entri: 1.149.780 rating buku dari pengguna.

Tidak ada missing value.

Book-Rating bernilai antara 0–10, di mana 0 menunjukkan rating implisit (misalnya, user melihat buku tapi tidak memberikan penilaian eksplisit).

## Cleaning Dataset
"""

df_books = df_books.dropna(subset=['Book-Author', 'Publisher', 'Image-URL-L'])
df_books.isnull().sum()

""" 1. Filter data rating yang bernilai > 0 (artinya rating valid, bukan nol atau kosong)"""

df_ratings = df_ratings[df_ratings['Book-Rating'] > 0]

df_ratings.shape

"""Filter user yang aktif: user yang punya lebih dari 100 rating"""

user_counts = df_ratings['User-ID'].value_counts()
active_users = user_counts[user_counts > 100].index
df_ratings = df_ratings[df_ratings['User-ID'].isin(active_users)]

df_ratings.shape

book_counts = df_ratings['ISBN'].value_counts()
popular_books = book_counts[book_counts > 10].index
df_ratings = df_ratings[df_ratings['ISBN'].isin(popular_books)]
df_ratings.shape

interactions = df_ratings

"""Data Cleaning"""

# Bersihkan dataset books dari missing values
print(f" Books sebelum cleaning: {df_books.shape}")
df_books = df_books.dropna(subset=['Book-Author', 'Publisher', 'Image-URL-L'])
print(f" Books setelah cleaning: {df_books.shape}")
print(f" Berhasil menghapus {df_books.shape[0]} baris dengan missing values")

print("=" * 80)
print("SUMMARY DATA SETELAH CLEANING")
print("=" * 80)

print(f" Jumlah Users Aktif: {df_ratings['User-ID'].nunique()}")
print(f" Jumlah Books Populer: {df_ratings['ISBN'].nunique()}")
print(f" Total Interactions: {len(df_ratings)}")
print(f" Rata-rata Rating: {df_ratings['Book-Rating'].mean():.2f}")
print(f" Sparsity: {(1 - len(df_ratings) / (df_ratings['User-ID'].nunique() * df_ratings['ISBN'].nunique())) * 100:.2f}%")

"""# INISIALISASI DATASET LIGHTFM"""

dataset = Dataset()

dataset.fit(
    users=df_ratings['User-ID'].unique(),
    items=df_ratings['ISBN'].unique()
)

print(f" Dataset LightFM berhasil diinisialisasi")
print(f" Jumlah users: {len(df_ratings['User-ID'].unique())}")
print(f" Jumlah items: {len(df_ratings['ISBN'].unique())}")

valid_isbns = set(df_ratings['ISBN'].unique())
df_books = df_books[df_books['ISBN'].isin(valid_isbns)].copy()
print(f"📚 Books dataset after filtering: {len(df_books)} books")

"""## Persiapan Item Features untuk Hybrid Model"""

all_features = set()

for _, row in df_books.iterrows():
    features = [
        f"title:{row['Book-Title']}",
        f"author:{row['Book-Author']}",
        f"publisher:{row['Publisher']}"
    ]
    all_features.update(features)

print(f" Total unique features: {len(all_features)}")

# Fit item features ke dataset
dataset.fit_partial(item_features=list(all_features))
print(" Item features berhasil di-fit ke dataset")

"""Build interaction matrix dengan rating sebagai weight"""

interactions, weights = dataset.build_interactions([
    (row['User-ID'], row['ISBN'], row['Book-Rating'])
    for _, row in df_ratings.iterrows()
])

print(f" Interaction matrix shape: {interactions.shape}")
print(f" Total interactions: {interactions.nnz}")
print(f" Density: {(interactions.nnz / (interactions.shape[0] * interactions.shape[1])) * 100:.4f}%")

"""# Build item features matrix untuk hybrid model"""

valid_isbns = set(df_ratings['ISBN'].unique())
print(f" Valid ISBNs in ratings: {len(valid_isbns)}")
print(f" ISBNs in books dataset: {len(df_books['ISBN'].unique())}")

df_books_filtered = df_books[df_books['ISBN'].isin(valid_isbns)].copy()
print(f" Books after filtering: {len(df_books_filtered)}")

item_features_data = []
for _, row in df_books_filtered.iterrows():
    isbn = row['ISBN']
    if isbn in dataset.mapping()[2]:
        features = [
            f"title:{row['Book-Title']}",
            f"author:{row['Book-Author']}",
            f"publisher:{row['Publisher']}"
        ]
        item_features_data.append((isbn, features))

print(f" Item features data prepared: {len(item_features_data)} items")

item_features = dataset.build_item_features(item_features_data)

print(f" Item features matrix shape: {item_features.shape}")
print(f" Item features matrix berhasil dibuat")

df_books = df_books_filtered

"""# TRAIN-TEST SPLIT 80/20"""

train_interactions, test_interactions = random_train_test_split(
    interactions, test_percentage=0.2, random_state=42
)

print(f" Train interactions: {train_interactions.nnz}")
print(f" Test interactions: {test_interactions.nnz}")
print(f" Train ratio: {(train_interactions.nnz / interactions.nnz) * 100:.1f}%")
print(f" Test ratio: {(test_interactions.nnz / interactions.nnz) * 100:.1f}%")

"""# Modeling

Model COLLABORATIVE FILTERING
"""

print(" Training Collaborative Filtering Model...")
cf_model = LightFM(loss='warp', random_state=42, item_alpha=1e-6, user_alpha=1e-6)
cf_model.fit(train_interactions, epochs=100, num_threads=2, verbose=True)

print("✅ Collaborative Filtering Model berhasil dilatih!")

"""Model 2 - Hybrid Filtering"""

print(" Training Hybrid Filtering Model...")
hybrid_model = LightFM(loss='warp', random_state=42)
hybrid_model.fit(
    train_interactions,
    item_features=item_features,
    epochs=100,
    num_threads=2,
    verbose=True
)

print("✅ Hybrid Filtering Model berhasil dilatih!")

"""# Evaluasi

EVALUASI COLLABORATIVE FILTERING
"""

cf_train_precision = precision_at_k(cf_model, train_interactions, k=5).mean()
cf_train_auc = auc_score(cf_model, train_interactions).mean()
cf_test_precision = precision_at_k(cf_model, test_interactions, k=5).mean()
cf_test_auc = auc_score(cf_model, test_interactions).mean()

print(" COLLABORATIVE FILTERING RESULTS:")
print(f"   Train Precision@5: {cf_train_precision:.4f}")
print(f"   Train AUC Score: {cf_train_auc:.4f}")
print(f"   Test Precision@5: {cf_test_precision:.4f}")
print(f"   Test AUC Score: {cf_test_auc:.4f}")

cf_results = {
    'train_precision': cf_train_precision,
    'train_auc': cf_train_auc,
    'test_precision': cf_test_precision,
    'test_auc': cf_test_auc
}

"""Evaluasi Hybrid Filtering"""

hybrid_train_precision = precision_at_k(
    hybrid_model, train_interactions, item_features=item_features, k=5
).mean()
hybrid_train_auc = auc_score(
    hybrid_model, train_interactions, item_features=item_features
).mean()
hybrid_test_precision = precision_at_k(
    hybrid_model, test_interactions, item_features=item_features, k=5
).mean()
hybrid_test_auc = auc_score(
    hybrid_model, test_interactions, item_features=item_features
).mean()

print(" HYBRID FILTERING RESULTS:")
print(f"    Train Precision@5: {hybrid_train_precision:.4f}")
print(f"    Train AUC Score: {hybrid_train_auc:.4f}")
print(f"    Test Precision@5: {hybrid_test_precision:.4f}")
print(f"    Test AUC Score: {hybrid_test_auc:.4f}")

# Simpan hasil untuk perbandingan
hybrid_results = {
    'train_precision': hybrid_train_precision,
    'train_auc': hybrid_train_auc,
    'test_precision': hybrid_test_precision,
    'test_auc': hybrid_test_auc
}

comparison_data = {
    'Model': ['Collaborative Filtering', 'Hybrid Filtering'],
    'Train Precision@5': [cf_results['train_precision'], hybrid_results['train_precision']],
    'Train AUC': [cf_results['train_auc'], hybrid_results['train_auc']],
    'Test Precision@5': [cf_results['test_precision'], hybrid_results['test_precision']],
    'Test AUC': [cf_results['test_auc'], hybrid_results['test_auc']]
}

comparison_df = pd.DataFrame(comparison_data)
print(" PERBANDINGAN PERFORMA MODEL:")
print(comparison_df.to_string(index=False, float_format='%.4f'))

# Tentukan model terbaik
if hybrid_results['test_precision'] > cf_results['test_precision']:
    best_model_name = 'Hybrid Filtering'
    best_model = hybrid_model
    best_test_precision = hybrid_results['test_precision']
    model_type = 'hybrid'
else:
    best_model_name = 'Collaborative Filtering'
    best_model = cf_model
    best_test_precision = cf_results['test_precision']
    model_type = 'collaborative'

print(f"\n🏆 MODEL TERBAIK: {best_model_name}")
print(f"📊 Test Precision@5: {best_test_precision:.4f}")

# ============================================================================
# CELL 20: Visualisasi Perbandingan Model
# ============================================================================

# Visualisasi perbandingan model
fig, axes = plt.subplots(1, 2, figsize=(15, 6))

# Plot Precision@5
metrics = ['Train Precision@5', 'Test Precision@5']
cf_precision = [cf_results['train_precision'], cf_results['test_precision']]
hybrid_precision = [hybrid_results['train_precision'], hybrid_results['test_precision']]

x = np.arange(len(metrics))
width = 0.35

axes[0].bar(x - width/2, cf_precision, width, label='Collaborative Filtering', alpha=0.8)
axes[0].bar(x + width/2, hybrid_precision, width, label='Hybrid Filtering', alpha=0.8)
axes[0].set_xlabel('Metrics')
axes[0].set_ylabel('Precision@5')
axes[0].set_title('Perbandingan Precision@5')
axes[0].set_xticks(x)
axes[0].set_xticklabels(metrics)
axes[0].legend()
axes[0].grid(True, alpha=0.3)

# Plot AUC Score
metrics_auc = ['Train AUC', 'Test AUC']
cf_auc = [cf_results['train_auc'], cf_results['test_auc']]
hybrid_auc = [hybrid_results['train_auc'], hybrid_results['test_auc']]

axes[1].bar(x - width/2, cf_auc, width, label='Collaborative Filtering', alpha=0.8)
axes[1].bar(x + width/2, hybrid_auc, width, label='Hybrid Filtering', alpha=0.8)
axes[1].set_xlabel('Metrics')
axes[1].set_ylabel('AUC Score')
axes[1].set_title('Perbandingan AUC Score')
axes[1].set_xticks(x)
axes[1].set_xticklabels(metrics_auc)
axes[1].legend()
axes[1].grid(True, alpha=0.3)

plt.tight_layout()
plt.show()

print("=" * 60)
print("SETUP UNTUK REKOMENDASI")
print("=" * 60)

# Buat mapping untuk konversi ID
user_mapping = {v: k for k, v in dataset.mapping()[0].items()}
item_mapping = {v: k for k, v in dataset.mapping()[2].items()}

print(f" User mapping berhasil dibuat ({len(user_mapping)} users)")
print(f" Item mapping berhasil dibuat ({len(item_mapping)} items)")

# Pilih sample user untuk demo
sample_users = df_ratings['User-ID'].unique()[:5]
print(f"\n👥 Sample Users untuk demo: {sample_users}")

# ============================================================================
# CELL 22: Rekomendasi dengan Collaborative Filtering
# ============================================================================

print("=" * 80)
print("REKOMENDASI DENGAN COLLABORATIVE FILTERING")
print("=" * 80)

# Pilih user untuk demo
demo_user_id = df_ratings['User-ID'].iloc[100]  # User ke-100
user_index = dataset.mapping()[0].get(demo_user_id)

print(f" REKOMENDASI UNTUK USER ID: {demo_user_id}")
print(f" Model: COLLABORATIVE FILTERING")
print("-" * 50)

# Generate predictions dengan Collaborative Filtering
cf_scores = cf_model.predict(user_index, np.arange(interactions.shape[1]))
cf_top_items = np.argsort(-cf_scores)[:5]
cf_recommended_isbns = [item_mapping[i] for i in cf_top_items]

# Tampilkan rekomendasi CF
print(" TOP 5 REKOMENDASI (COLLABORATIVE FILTERING):")
for i, isbn in enumerate(cf_recommended_isbns, 1):
    book_info = df_books[df_books['ISBN'] == isbn]
    if not book_info.empty:
        book = book_info.iloc[0]
        score = cf_scores[cf_top_items[i-1]]
        print(f"\n{i}. {book['Book-Title']}")
        print(f"    Author: {book['Book-Author']}")
        print(f"    Publisher: {book['Publisher']}")
        print(f"    Score: {score:.4f}")
        print(f"    ISBN: {isbn}")

        # Tampilkan gambar jika memungkinkan
        try:
            display(Image(url=book['Image-URL-L'], width=100))
        except:
            print(f"   🖼️  Image URL: {book['Image-URL-L']}")

# ============================================================================
# CELL 23: Rekomendasi dengan Hybrid Filtering
# ============================================================================

print("=" * 80)
print("REKOMENDASI DENGAN HYBRID FILTERING")
print("=" * 80)

print(f"🔍 REKOMENDASI UNTUK USER ID: {demo_user_id}")
print(f"📊 Model: HYBRID FILTERING")
print("-" * 50)

hybrid_scores = hybrid_model.predict(
    user_index,
    np.arange(interactions.shape[1]),
    item_features=item_features
)
hybrid_top_items = np.argsort(-hybrid_scores)[:5]
hybrid_recommended_isbns = [item_mapping[i] for i in hybrid_top_items]

print("📚 TOP 5 REKOMENDASI (HYBRID FILTERING):")
for i, isbn in enumerate(hybrid_recommended_isbns, 1):
    book_info = df_books[df_books['ISBN'] == isbn]
    if not book_info.empty:
        book = book_info.iloc[0]
        score = hybrid_scores[hybrid_top_items[i-1]]
        print(f"\n{i}. {book['Book-Title']}")
        print(f"   Author: {book['Book-Author']}")
        print(f"   Publisher: {book['Publisher']}")
        print(f"   Score: {score:.4f}")
        print(f"   ISBN: {isbn}")

        # Tampilkan gambar jika memungkinkan
        try:
            display(Image(url=book['Image-URL-L'], width=100))
        except:
            print(f"   🖼️  Image URL: {book['Image-URL-L']}")

